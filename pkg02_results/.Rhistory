# construct features for each participant and saves into a Rdata file
setwd("~/Workspaces/R workspace/Activity Recognition/pkg01_Data_Cleaning/")
source("f02_ML_features_one_participant.R")
# To obtain MET scores (energy expenditure) for each task, we have to read 'cosmed_mets.csv' file.
# However, we do not need to read this file for every participant since it contains the information for all participant-tasks.
# We better read it once into a dataframe and pass it to our functions.
cosmed.df <- read.csv(file = paste(dataFolder, "../cosmed_mets.csv", sep = ""))
cosmed.df$activity <- as.character(cosmed.df$activity)
# The task names are different in tasktimes files and cosmed. Therefore, we need to make them equal for our processing.
tasknames_mapping.df <- read.csv(file = paste(dataFolder, "../taskNames_mapping.csv", sep = ""), colClasses = rep("character", 2))
cosmed.df$task <- sapply(cosmed.df$activity, FUN = function(x) {
result <- which(tasknames_mapping.df$Cosmed_Task == x)
if(length(result) == 0) {
return(NA)
}
res <- tasknames_mapping.df$Task[result]
res
})
# Loading visit files
data.files <- read.participant.files(dataFolder, participantID)
# Checking if tasks have overlapping times
taskTimes.df <- data.files[[5]]
print.overlapping.tasks(taskTimes.df)
# Constructing features
feature.df <- ML.features.oneParticipant(participantID = participantID,
cosmed.df = cosmed.df,
ppt.v1.df = data.files[[1]], ppt.v2.df = data.files[[2]], ppt.v3.df = data.files[[3]], ppt.v4.df = data.files[[4]],
taskTimes.df = data.files[[5]],
epoch.length = (15 * 100))
save(feature.df, file = paste(dataFolder, "ML_Features/", participantID, "_wrist_features.Rdata", sep = ""))
View(taskTimes.df)
participantID <- "KENO149" # This is the first participant in the file.
# This is the address of the folder in your computer where participants' accelerometer files are located.
dataFolder <- "~/Dropbox/Work-Research/Current Directory/Activity Recognition/Datasets/Raw Data/Participant Data/"
# The main script --------------------------------------------------------------------------------
# construct features for each participant and saves into a Rdata file
setwd("~/Workspaces/R workspace/Activity Recognition/pkg01_Data_Cleaning/")
source("f02_ML_features_one_participant.R")
# To obtain MET scores (energy expenditure) for each task, we have to read 'cosmed_mets.csv' file.
# However, we do not need to read this file for every participant since it contains the information for all participant-tasks.
# We better read it once into a dataframe and pass it to our functions.
cosmed.df <- read.csv(file = paste(dataFolder, "../cosmed_mets.csv", sep = ""))
cosmed.df$activity <- as.character(cosmed.df$activity)
# The task names are different in tasktimes files and cosmed. Therefore, we need to make them equal for our processing.
tasknames_mapping.df <- read.csv(file = paste(dataFolder, "../taskNames_mapping.csv", sep = ""), colClasses = rep("character", 2))
cosmed.df$task <- sapply(cosmed.df$activity, FUN = function(x) {
result <- which(tasknames_mapping.df$Cosmed_Task == x)
if(length(result) == 0) {
return(NA)
}
res <- tasknames_mapping.df$Task[result]
res
})
# Loading visit files
data.files <- read.participant.files(dataFolder, participantID)
# Checking if tasks have overlapping times
taskTimes.df <- data.files[[5]]
print.overlapping.tasks(taskTimes.df)
# Constructing features
feature.df <- ML.features.oneParticipant(participantID = participantID,
cosmed.df = cosmed.df,
ppt.v1.df = data.files[[1]], ppt.v2.df = data.files[[2]], ppt.v3.df = data.files[[3]], ppt.v4.df = data.files[[4]],
taskTimes.df = data.files[[5]],
epoch.length = (15 * 100))
save(feature.df, file = paste(dataFolder, "ML_Features/", participantID, "_wrist_features.Rdata", sep = ""))
View(feature.df)
rm(list = ls())
participantID <- "MESA088" # This is the first participant in the file.
# This is the address of the folder in your computer where participants' accelerometer files are located.
dataFolder <- "~/Dropbox/Work-Research/Current Directory/Activity Recognition/Datasets/Raw Data/Participant Data/"
# The main script --------------------------------------------------------------------------------
# construct features for each participant and saves into a Rdata file
setwd("~/Workspaces/R workspace/Activity Recognition/pkg01_Data_Cleaning/")
source("f02_ML_features_one_participant.R")
# To obtain MET scores (energy expenditure) for each task, we have to read 'cosmed_mets.csv' file.
# However, we do not need to read this file for every participant since it contains the information for all participant-tasks.
# We better read it once into a dataframe and pass it to our functions.
cosmed.df <- read.csv(file = paste(dataFolder, "../cosmed_mets.csv", sep = ""))
cosmed.df$activity <- as.character(cosmed.df$activity)
# The task names are different in tasktimes files and cosmed. Therefore, we need to make them equal for our processing.
tasknames_mapping.df <- read.csv(file = paste(dataFolder, "../taskNames_mapping.csv", sep = ""), colClasses = rep("character", 2))
cosmed.df$task <- sapply(cosmed.df$activity, FUN = function(x) {
result <- which(tasknames_mapping.df$Cosmed_Task == x)
if(length(result) == 0) {
return(NA)
}
res <- tasknames_mapping.df$Task[result]
res
})
# Loading visit files
data.files <- read.participant.files(dataFolder, participantID)
# Checking if tasks have overlapping times
taskTimes.df <- data.files[[5]]
print.overlapping.tasks(taskTimes.df)
# Constructing features
feature.df <- ML.features.oneParticipant(participantID = participantID,
cosmed.df = cosmed.df,
ppt.v1.df = data.files[[1]], ppt.v2.df = data.files[[2]], ppt.v3.df = data.files[[3]], ppt.v4.df = data.files[[4]],
taskTimes.df = data.files[[5]],
epoch.length = (15 * 100))
save(feature.df, file = paste(dataFolder, "ML_Features/", participantID, "_wrist_features.Rdata", sep = ""))
participantID <- "TALI002" # This is the first participant in the file.
# This is the address of the folder in your computer where participants' accelerometer files are located.
dataFolder <- "~/Dropbox/Work-Research/Current Directory/Activity Recognition/Datasets/Raw Data/Participant Data/"
# The main script --------------------------------------------------------------------------------
# construct features for each participant and saves into a Rdata file
setwd("~/Workspaces/R workspace/Activity Recognition/pkg01_Data_Cleaning/")
source("f02_ML_features_one_participant.R")
# To obtain MET scores (energy expenditure) for each task, we have to read 'cosmed_mets.csv' file.
# However, we do not need to read this file for every participant since it contains the information for all participant-tasks.
# We better read it once into a dataframe and pass it to our functions.
cosmed.df <- read.csv(file = paste(dataFolder, "../cosmed_mets.csv", sep = ""))
cosmed.df$activity <- as.character(cosmed.df$activity)
# The task names are different in tasktimes files and cosmed. Therefore, we need to make them equal for our processing.
tasknames_mapping.df <- read.csv(file = paste(dataFolder, "../taskNames_mapping.csv", sep = ""), colClasses = rep("character", 2))
cosmed.df$task <- sapply(cosmed.df$activity, FUN = function(x) {
result <- which(tasknames_mapping.df$Cosmed_Task == x)
if(length(result) == 0) {
return(NA)
}
res <- tasknames_mapping.df$Task[result]
res
})
# Loading visit files
data.files <- read.participant.files(dataFolder, participantID)
# Checking if tasks have overlapping times
taskTimes.df <- data.files[[5]]
print.overlapping.tasks(taskTimes.df)
# Constructing features
feature.df <- ML.features.oneParticipant(participantID = participantID,
cosmed.df = cosmed.df,
ppt.v1.df = data.files[[1]], ppt.v2.df = data.files[[2]], ppt.v3.df = data.files[[3]], ppt.v4.df = data.files[[4]],
taskTimes.df = data.files[[5]],
epoch.length = (15 * 100))
save(feature.df, file = paste(dataFolder, "ML_Features/", participantID, "_wrist_features.Rdata", sep = ""))
View(feature.df)
View(cosmed.df[cosmed.df$participant_name == , ])
View(cosmed.df[cosmed.df$participant_name == 'TALI', ])
rm(list = ls())
participantID <- "JERO138" # This is the first participant in the file.
# This is the address of the folder in your computer where participants' accelerometer files are located.
dataFolder <- "~/Dropbox/Work-Research/Current Directory/Activity Recognition/Datasets/Raw Data/Participant Data/"
# The main script --------------------------------------------------------------------------------
# construct features for each participant and saves into a Rdata file
setwd("~/Workspaces/R workspace/Activity Recognition/pkg01_Data_Cleaning/")
source("f02_ML_features_one_participant.R")
# To obtain MET scores (energy expenditure) for each task, we have to read 'cosmed_mets.csv' file.
# However, we do not need to read this file for every participant since it contains the information for all participant-tasks.
# We better read it once into a dataframe and pass it to our functions.
cosmed.df <- read.csv(file = paste(dataFolder, "../cosmed_mets.csv", sep = ""))
cosmed.df$activity <- as.character(cosmed.df$activity)
# The task names are different in tasktimes files and cosmed. Therefore, we need to make them equal for our processing.
tasknames_mapping.df <- read.csv(file = paste(dataFolder, "../taskNames_mapping.csv", sep = ""), colClasses = rep("character", 2))
cosmed.df$task <- sapply(cosmed.df$activity, FUN = function(x) {
result <- which(tasknames_mapping.df$Cosmed_Task == x)
if(length(result) == 0) {
return(NA)
}
res <- tasknames_mapping.df$Task[result]
res
})
# Loading visit files
data.files <- read.participant.files(dataFolder, participantID)
# Checking if tasks have overlapping times
taskTimes.df <- data.files[[5]]
print.overlapping.tasks(taskTimes.df)
# Constructing features
feature.df <- ML.features.oneParticipant(participantID = participantID,
cosmed.df = cosmed.df,
ppt.v1.df = data.files[[1]], ppt.v2.df = data.files[[2]], ppt.v3.df = data.files[[3]], ppt.v4.df = data.files[[4]],
taskTimes.df = data.files[[5]],
epoch.length = (15 * 100))
save(feature.df, file = paste(dataFolder, "ML_Features/", participantID, "_wrist_features.Rdata", sep = ""))
rm(list = ls())
# Check 'participant_age.csv' file to see how our participant IDs look like.
participantID <- "KASI068" # This is the first participant in the file.
# This is the address of the folder in your computer where participants' accelerometer files are located.
dataFolder <- "~/Dropbox/Work-Research/Current Directory/Activity Recognition/Datasets/Raw Data/Participant Data/"
# The main script --------------------------------------------------------------------------------
# construct features for each participant and saves into a Rdata file
setwd("~/Workspaces/R workspace/Activity Recognition/pkg01_Data_Cleaning/")
source("f02_ML_features_one_participant.R")
# To obtain MET scores (energy expenditure) for each task, we have to read 'cosmed_mets.csv' file.
# However, we do not need to read this file for every participant since it contains the information for all participant-tasks.
# We better read it once into a dataframe and pass it to our functions.
cosmed.df <- read.csv(file = paste(dataFolder, "../cosmed_mets.csv", sep = ""))
cosmed.df$activity <- as.character(cosmed.df$activity)
# The task names are different in tasktimes files and cosmed. Therefore, we need to make them equal for our processing.
tasknames_mapping.df <- read.csv(file = paste(dataFolder, "../taskNames_mapping.csv", sep = ""), colClasses = rep("character", 2))
cosmed.df$task <- sapply(cosmed.df$activity, FUN = function(x) {
result <- which(tasknames_mapping.df$Cosmed_Task == x)
if(length(result) == 0) {
return(NA)
}
res <- tasknames_mapping.df$Task[result]
res
})
# Loading visit files
data.files <- read.participant.files(dataFolder, participantID)
# Checking if tasks have overlapping times
taskTimes.df <- data.files[[5]]
print.overlapping.tasks(taskTimes.df)
# Constructing features
feature.df <- ML.features.oneParticipant(participantID = participantID,
cosmed.df = cosmed.df,
ppt.v1.df = data.files[[1]], ppt.v2.df = data.files[[2]], ppt.v3.df = data.files[[3]], ppt.v4.df = data.files[[4]],
taskTimes.df = data.files[[5]],
epoch.length = (15 * 100))
save(feature.df, file = paste(dataFolder, "ML_Features/", participantID, "_wrist_features.Rdata", sep = ""))
View(feature.df)
rm(list = ls())
# Check 'participant_age.csv' file to see how our participant IDs look like.
participantID <- "HEAH055" # This is the first participant in the file.
# This is the address of the folder in your computer where participants' accelerometer files are located.
dataFolder <- "~/Dropbox/Work-Research/Current Directory/Activity Recognition/Datasets/Raw Data/Participant Data/"
# The main script --------------------------------------------------------------------------------
# construct features for each participant and saves into a Rdata file
setwd("~/Workspaces/R workspace/Activity Recognition/pkg01_Data_Cleaning/")
source("f02_ML_features_one_participant.R")
# To obtain MET scores (energy expenditure) for each task, we have to read 'cosmed_mets.csv' file.
# However, we do not need to read this file for every participant since it contains the information for all participant-tasks.
# We better read it once into a dataframe and pass it to our functions.
cosmed.df <- read.csv(file = paste(dataFolder, "../cosmed_mets.csv", sep = ""))
cosmed.df$activity <- as.character(cosmed.df$activity)
# The task names are different in tasktimes files and cosmed. Therefore, we need to make them equal for our processing.
tasknames_mapping.df <- read.csv(file = paste(dataFolder, "../taskNames_mapping.csv", sep = ""), colClasses = rep("character", 2))
cosmed.df$task <- sapply(cosmed.df$activity, FUN = function(x) {
result <- which(tasknames_mapping.df$Cosmed_Task == x)
if(length(result) == 0) {
return(NA)
}
res <- tasknames_mapping.df$Task[result]
res
})
# Loading visit files
data.files <- read.participant.files(dataFolder, participantID)
# Checking if tasks have overlapping times
taskTimes.df <- data.files[[5]]
print.overlapping.tasks(taskTimes.df)
# Constructing features
feature.df <- ML.features.oneParticipant(participantID = participantID,
cosmed.df = cosmed.df,
ppt.v1.df = data.files[[1]], ppt.v2.df = data.files[[2]], ppt.v3.df = data.files[[3]], ppt.v4.df = data.files[[4]],
taskTimes.df = data.files[[5]],
epoch.length = (15 * 100))
save(feature.df, file = paste(dataFolder, "ML_Features/", participantID, "_wrist_features.Rdata", sep = ""))
View(feature.df)
rm(list = ls())
a <- read.csv("~/Dropbox/Work-Research/Current Directory/Activity Recognition/Datasets/Raw Data/cosmed_mets.csv")
View(a)
selected.participants <- c("AUBR",
"BAVA",
"CYSA",
"DAGO",
"HEAH",
"JAJE",
"JOBR",
"JOGA",
"KAPO",
"KASI",
"KENO",
"KRRO",
"MAPL",
"MESA",
"SAPH",
"STCO",
"TALI")
selected.participants <- as.character(
c("AUBR",
"BAVA",
"CYSA",
"DAGO",
"HEAH",
"JAJE",
"JOBR",
"JOGA",
"KAPO",
"KASI",
"KENO",
"KRRO",
"MAPL",
"MESA",
"SAPH",
"STCO",
"TALI"))
View(a)
b <- a[a$participant_name %in% selected.participants, c("cosmed_age", "cosmed_weight", "cosmed_height")]
View(b)
b <- a[a$participant_name %in% selected.participants, c("participant_name", "cosmed_age", "cosmed_weight", "cosmed_height")]
View(b)
for(ppt in selected.participants) {
temp <- b[min(which(b$participant_name == ppt)), ]
c <- rbind(c, temp)
}
rm(temp, ppt)
c <- data.frame(matrix(nrow = 0, ncol = 4))
for(ppt in selected.participants) {
temp <- b[min(which(b$participant_name == ppt)), ]
c <- rbind(c, temp)
}
View(temp)
View(c)
rm(temp, ppt)
c <- data.frame(matrix(nrow = 0, ncol = 4))
for(ppt in selected.participants) {
temp <- b[min(which(b$participant_name == ppt)), ]
c <- rbind(c, temp)
}
c <- data.frame(matrix(nrow = 0, ncol = 4))
for(ppt in selected.participants) {
temp <- b[min(which(b$participant_name == ppt)), ]
c <- rbind(c, temp)
}
rm(temp, ppt)
c <- data.frame(matrix(nrow = 0, ncol = 4))
for(ppt in selected.participants) {
temp <- b[min(which(b$participant_name == ppt)), ]
c <- rbind(c, temp)
}
rm(temp, ppt)
View(c)
View(a)
??read.xlsx
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
install.packages("rJava")
library(xlsx)
library(xlsx)
install.packages("rJava")
install.packages("rJava")
library(xlsx)
install.packages("rJava", type = "source")
install.packages("rJava", type = "source")
library(xlsx)
library(xlsx)
library(xlsx)
enrollment.log <- read.xlsx("~/Dropbox/Work-Research/Current Directory/Activity Recognition/Datasets/Raw Data/Enrollment Log - CHORES XL_deidentified.xlsx")
enrollment.log <- read.xlsx("~/Dropbox/Work-Research/Current Directory/Activity Recognition/Datasets/Raw Data/Enrollment Log - CHORES XL_deidentified.xlsx", sheetIndex = 1)
View(enrollment.log)
selected.participants <- as.character(
c("AUBR116",
"BAVA070",
"CYSA100",
"DAGO046",
"HEAH055",
"JAJE025",
"JOBR044",
"JOGA122",
"KAPO074",
"KASI068",
"KENO149",
"KRRO062",
"MAPL063",
"MESA088",
"SAPH073",
"STCO087",
"TALI022"))
View(enrollment.log)
rm(a, b, c)
colnames(enrollment.log)
a <- enrollment.log[enrollment.log$ID %in% selected.participants, c("ID", "Gender", "Age", "BMI")]
View(a)
rm(list = ls())
a <- read.csv("~/Dropbox/Work-Research/Current Directory/Activity Recognition/Datasets/Raw Data/demographics_selected.csv")
View(a)
print(paste("Male (", length(which(a$Gender == 'M')), ") vs Female (", length(which(a$Gender == 'F')), ")"))
print(paste("Age: ", round(mean(a$Age), digits = 1), "(", round(sd(a$Age), digits = 1), ")"))
a$BMI <- NA
a$BMI <- NA
for(i in 1:nrow(a)) {
a$BMI[i] <- (a$Weight[i]) / ((a$Height[i] / 100)^2)
}
rm(i)
View(a)
print(paste("BMI: ", round(mean(a$BMI), digits = 1), "(", round(sd(a$BMI), digits = 1), ")"))
print(paste("Height: ", round(mean(a$Height), digits = 1), "(", round(sd(a$Height), digits = 1), ")"))
print(paste("Weight: ", round(mean(a$Weight), digits = 1), "(", round(sd(a$Weight), digits = 1), ")"))
rm(a)
setwd("~/Workspaces/R workspace/Activity Recognition/pkg02_results/")
l <- dir("~/Dropbox/Work-Research/Current Directory/Activity Recognition/Datasets/Raw Data/Participant Data/ML_Features/", pattern = "^.*.Rdata$")
dataFolder <- "~/Dropbox/Work-Research/Current Directory/Activity Recognition/Datasets/Raw Data/Participant Data/ML_Features/"
load(paste(dataFolder, "l[1]", sep = ""))
load(paste(dataFolder, l[1], sep = ""))
wrist.df <- data.frame(matrix(nrow = 0, ncol = 12))
wrist.df <- data.frame(matrix(nrow = 0, ncol = 12))
for(filename in l) {
load(paste(dataFolder, filename, sep = ""))
wrist.df <- rbind(wrist.df, feature.df)
}
View(wrist.df)
rm(filename, feature.df, l)
ppt <- wrist.df$PID[1]
ppt.df <- wrist.df[wrist.df$PID == ppt, ]
task <- ppt.df$Task[1]
ppt.task.df <- ppt.df[ppt.df$Task == task, ]
colnames(ppt.task.df)
activityRecognition.df <- data.frame(matrix(nrow = 0, ncol = 12))
for(ppt in levels(as.factor(wrist.df$PID))) {
message(paste(as.character(ppt)))
ppt.df <- wrist.df[wrist.df$PID == ppt, ]
for(task in levels(as.factor(ppt.df$Task))) {
ppt.task.df <- ppt.df[ppt.df$Task == task, ]
temp <- data.frame(PID = as.character(ppt),
Task = as.character(task),
startTime = as.character(ppt.task.df$start.time[1]),
endTime = as.character(ppt.task.df$end.time[nrow(ppt.task.df)]),
MVM = mean(ppt.task.df$MVM, na.rm = T),
SDVM = mean(ppt.task.df$SDVM, na.rm = T),
MANGLE = mean(ppt.task.df$MANGLE, na.rm = T),
SDANGLE = mean(ppt.task.df$SDANGLE, na.rm = T),
P625 = mean(ppt.task.df$P625, na.rm = T),
DF = mean(ppt.task.df$DF, na.rm = T),
FPDF = mean(ppt.task.df$FPDF, na.rm = T),
MET = ppt.task.df$MET[1])
activityRecognition.df <- rbind(activityRecognition.df, temp)
}
}
View(activityRecognition.df)
ppt.task.df <- ppt.df[ppt.df$Task == task, ]
activityRecognition.df <- data.frame(matrix(nrow = 0, ncol = 12))
for(ppt in levels(as.factor(wrist.df$PID))) {
message(paste(as.character(ppt)))
ppt.df <- wrist.df[wrist.df$PID == ppt, ]
for(task in levels(as.factor(ppt.df$Task))) {
ppt.task.df <- ppt.df[ppt.df$Task == task, ]
if(nrow(ppt.task.df) > 0) {
temp <- data.frame(PID = as.character(ppt),
Task = as.character(task),
startTime = as.character(ppt.task.df$start.time[1]),
endTime = as.character(ppt.task.df$end.time[nrow(ppt.task.df)]),
MVM = mean(ppt.task.df$MVM, na.rm = T),
SDVM = mean(ppt.task.df$SDVM, na.rm = T),
MANGLE = mean(ppt.task.df$MANGLE, na.rm = T),
SDANGLE = mean(ppt.task.df$SDANGLE, na.rm = T),
P625 = mean(ppt.task.df$P625, na.rm = T),
DF = mean(ppt.task.df$DF, na.rm = T),
FPDF = mean(ppt.task.df$FPDF, na.rm = T),
MET = ppt.task.df$MET[1])
activityRecognition.df <- rbind(activityRecognition.df, temp)
}
}
}
View(activityRecognition.df)
rm(ppt, task, temp, ppt.task.df, ppt.df)
task <- as.character(activityRecognition.df$Task[1])
task.df <- activityRecognition.df[activityRecognition.df$Task == task, ]
for(task in levels(as.factor(activityRecognition.df$Task))) {
task.df <- activityRecognition.df[activityRecognition.df$Task == task, ]
if(nrow(task.df) > 0) {
print(paste(task, " & ",
"METS: ", mean(task.df$MET, na.rm = T), " (", sd(task.df$MET, na.rm = T), ") & ",
"MVM: ", mean(task.df$MVM, na.rm = T), " (", sd(task.df$MVM, na.rm = T), ") & ",
"SDVM: ", mean(task.df$SDVM, na.rm = T), " (", sd(task.df$SDVM, na.rm = T), ") & ",
"MANGLE: ", mean(task.df$MANGLE, na.rm = T), " (", sd(task.df$MANGLE, na.rm = T), ") & ",
"SDANGLE: ", mean(task.df$SDANGLE, na.rm = T), " (", sd(task.df$SDANGLE, na.rm = T), ") & ",
"P625: ", mean(task.df$P625, na.rm = T), " (", sd(task.df$P625, na.rm = T), ") & ",
"DF: ", mean(task.df$DF, na.rm = T), " (", sd(task.df$DF, na.rm = T), ") & ",
"FPDF: ", mean(task.df$FPDF, na.rm = T), " (", sd(task.df$FPDF, na.rm = T), ") \\",
sep = ""))
}
}
for(task in levels(as.factor(activityRecognition.df$Task))) {
task.df <- activityRecognition.df[activityRecognition.df$Task == task, ]
if(nrow(task.df) > 0) {
print(paste(task, " & ",
"METS: ", round(mean(task.df$MET, na.rm = T), digits = 1), " (", round(sd(task.df$MET, na.rm = T), digits = 1), ") & ",
"MVM: ", round(mean(task.df$MVM, na.rm = T), digits = 1), " (", round(sd(task.df$MVM, na.rm = T), digits = 1), ") & ",
"SDVM: ", round(mean(task.df$SDVM, na.rm = T), digits = 1), " (", round(sd(task.df$SDVM, na.rm = T), digits = 1), ") & ",
"MANGLE: ", round(mean(task.df$MANGLE, na.rm = T), digits = 1), " (", round(sd(task.df$MANGLE, na.rm = T), digits = 1), ") & ",
"SDANGLE: ", round(mean(task.df$SDANGLE, na.rm = T), digits = 1), " (", round(sd(task.df$SDANGLE, na.rm = T), digits = 1), ") & ",
"P625: ", round(mean(task.df$P625, na.rm = T), digits = 1), " (", round(sd(task.df$P625, na.rm = T), digits = 1), ") & ",
"DF: ", round(mean(task.df$DF, na.rm = T), digits = 1), " (", round(sd(task.df$DF, na.rm = T), digits = 1), ") & ",
"FPDF: ", round(mean(task.df$FPDF, na.rm = T), digits = 2), " (", round(sd(task.df$FPDF, na.rm = T), digits = 2), ") \\",
sep = ""))
}
}
View(wrist.df)
for(task in levels(as.factor(activityRecognition.df$Task))) {
task.df <- activityRecognition.df[activityRecognition.df$Task == task, ]
if(nrow(task.df) > 0) {
print(paste(task, " & ",
"METS: ", round(mean(task.df$MET, na.rm = T), digits = 2), " (", round(sd(task.df$MET, na.rm = T), digits = 2), ") & ",
"MVM: ", round(mean(task.df$MVM, na.rm = T), digits = 2), " (", round(sd(task.df$MVM, na.rm = T), digits = 2), ") & ",
"SDVM: ", round(mean(task.df$SDVM, na.rm = T), digits = 2), " (", round(sd(task.df$SDVM, na.rm = T), digits = 2), ") & ",
"MANGLE: ", round(mean(task.df$MANGLE, na.rm = T), digits = 2), " (", round(sd(task.df$MANGLE, na.rm = T), digits = 2), ") & ",
"SDANGLE: ", round(mean(task.df$SDANGLE, na.rm = T), digits = 2), " (", round(sd(task.df$SDANGLE, na.rm = T), digits = 2), ") & ",
"P625: ", round(mean(task.df$P625, na.rm = T), digits = 2), " (", round(sd(task.df$P625, na.rm = T), digits = 2), ") & ",
"DF: ", round(mean(task.df$DF, na.rm = T), digits = 2), " (", round(sd(task.df$DF, na.rm = T), digits = 2), ") & ",
"FPDF: ", round(mean(task.df$FPDF, na.rm = T), digits = 2), " (", round(sd(task.df$FPDF, na.rm = T), digits = 2), ") \\",
sep = ""))
}
}
for(task in levels(as.factor(activityRecognition.df$Task))) {
task.df <- activityRecognition.df[activityRecognition.df$Task == task, ]
if(nrow(task.df) > 0) {
print(paste(task, " & ",
"METS: ", round(mean(task.df$MET, na.rm = T), digits = 2), " (", round(sd(task.df$MET, na.rm = T), digits = 2), ") & ",
"MVM: ", round(mean(task.df$MVM, na.rm = T), digits = 2), " (", round(sd(task.df$MVM, na.rm = T), digits = 2), ") & ",
"SDVM: ", round(mean(task.df$SDVM, na.rm = T), digits = 2), " (", round(sd(task.df$SDVM, na.rm = T), digits = 2), ") & ",
"MANGLE: ", round(mean(task.df$MANGLE, na.rm = T), digits = 2), " (", round(sd(task.df$MANGLE, na.rm = T), digits = 2), ") & ",
"SDANGLE: ", round(mean(task.df$SDANGLE, na.rm = T), digits = 2), " (", round(sd(task.df$SDANGLE, na.rm = T), digits = 2), ") & ",
"P625: ", round(mean(task.df$P625, na.rm = T), digits = 2), " (", round(sd(task.df$P625, na.rm = T), digits = 2), ") & ",
"DF: ", round(mean(task.df$DF, na.rm = T), digits = 2), " (", round(sd(task.df$DF, na.rm = T), digits = 2), ") & ",
"FPDF: ", round(mean(task.df$FPDF, na.rm = T), digits = 2), " (", round(sd(task.df$FPDF, na.rm = T), digits = 2), ") \\",
sep = ""))
}
}
View(activityRecognition.df)
min(wrist.df$MANGLE)
save(activityRecognition.df, file = "~/Dropbox/Work-Research/Current Directory/Activity Recognition/Datasets/Cleaned Data/wrist_features_042117.Rdata")
